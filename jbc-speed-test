#!/usr/bin/php
<?php

const POINT_MARKER_UP = "\e[1;35m●\e[0m";
const DIRECTION_MARKER_UP = "\e[1;35m↑\e[0m";
const POINT_MARKER_DOWN = "\e[1;36m●\e[0m";
const DIRECTION_MARKER_DOWN = "\e[1;36m↓\e[0m";

const INDICATOR_MIN = "\e[1;33m-\e[0m";
const INDICATOR_MAX = "\e[1;32m+\e[0m";
const UNKNOWN_VALUE = '??';

// Include settings file.
require(__DIR__  . '/settings.php');
if (empty($test_server_url)) {
  die("Settings file missing.\n");
}

$quiet = FALSE;
$csv = TRUE;
$isp = NULL;
$time_period = NULL;
$start_date = NULL;
$end_date = NULL;
$args = $argv;
unset($args[0]);

if (has_arg($args, 'out')) {
  $directions = [];
  if (has_arg($args, 'up')) {
    $directions[] = 'up';
  }
  if (has_arg($args, 'down')) {
    $directions[] = 'down';
  }
  if (!$directions) {
    $directions = ['up', 'down'];
  }
  $args = array_values($args);
  $num_rows = $args[0] ?? 0;
  $num_rows = intval($num_rows);
  if ($num_rows < 1) {
    $num_rows = 50;
  }
  if ($time_period = has_arg($args, '--period')) {
    switch ($time_period) {
      case 'early':
      case 'day':
      case 'late':
         // Valid value.
        break;
      default:
        die("Invalid time period.\n");
    }
  }
  $start_date = has_arg($args, '--start');
  $end_date = has_arg($args, '--end');
  show_graphs($csv_path, $directions, $num_rows, $time_period, $start_date, $end_date);
  die();
}

if (has_arg($args, '-q')) {
  $quiet = TRUE;
}

if (has_arg($args, 'nocsv')) {
  $csv = FALSE;
}

$direction = 'down';
if (has_arg($args, 'up')) {
  $direction = 'up';
}

$args = array_values($args);

$size = $args[0] ?? NULL;
switch ($size) {
  case 1:
  case 5:
  case 10:
  case 50:
  case 100:
    // Size is OK.
    break;
  default:
    $size = ($direction == 'up') ? 1 : 10;
}

if ($direction == 'down') {
  $direction_text = 'Download';
  $command = 'curl -s -o /tmp/dl-file ' . $test_server_url . '/' . $size . 'mb.dat ; rm /tmp/dl-file';
  if (!$quiet) {
    printf("Dowloading %s MB...\n", $size);
  }
}
else {
  $filename = $local_data_file_path . '/' . $size . 'mb.dat';
  if (!file_exists($filename)) {
    die(printf("Upload file (%s) missing.\n", $filename));
  }
  $direction_text = 'Upload';
  $command = 'curl -s --data-binary @' .$filename . ' ' . $test_server_url . '/index.html';
  if (!$quiet) {
    printf("Uploading %s MB...\n", $size);
  }
}

$start = microtime(TRUE);
$out = `$command`;
$end = microtime(TRUE);

$command = "ping {$ping_destination_host} -c 1 | grep -E -o 'time=[0-9.]+' | cut -f2 -d'='";
if ($ping = trim(`$command`)) {
  $ping = number_format(trim(`$command`), 0, '.', '');
}
else {
  $ping = UNKNOWN_VALUE;
}

if (!empty($isp_lookup_url)) {
  if ($info = file_get_contents($isp_lookup_url)) {
    $data = json_decode($info);
    $isp = $data->isp ?? NULL;
  }
}

$time = $end - $start;
$speed = $size / $time * 8;
if ($speed > 1) {
  $speed_text = number_format($speed, 1);
  $units = 'mbps';
}
else {
  $speed_text = number_format($speed * 1000, 0);
  $units = 'kbps';
}

if ($quiet) {
  printf("%s %s (%s ms)\n", $speed_text, $units, $ping);
}
else {
  printf("%s: %s %s (%s MB in %s sec)\n", $direction_text, $speed_text, $units, $size, number_format($time, 1));
  printf("Ping: %s ms\n", $ping);
  if ($isp) {
    printf("ISP: %s\n", $isp);
  }
}

if ($csv) {
  if ($fp = fopen($csv_path, 'a')) {
    fputcsv($fp, [date('Y-m-d H:i:s'), $direction, number_format($speed, 3), $size, $ping, $isp]);
    fclose($fp);
  }
}

function has_arg(&$args, $arg) {
  if (in_array($arg, $args)) {
    unset($args[array_search($arg, $args)]);
    return TRUE;
  }
  if (strpos($arg, '--') === 0) {
    foreach ($args as $a) {
      if (strpos($a, $arg . '=') === 0) {
        $parts = explode('=', $a);
        unset($args[array_search($arg, $args)]);
        return $parts[1];
      }
    } // Loop thru args.
  }
  return FALSE;
}

function show_graphs($csv_path, $directions = ['up', 'down'], $num_rows = 50, $time_period = NULL, $start_date = NULL, $end_date = NULL) {

  if ($start_date || $end_date) {
    $num_rows = 1000000;
  }

  $graph_width = 50;
  $graph_max_value = [
    'up' => 5,
    'down' => 50,
  ];
  $data = [];
  if (count($directions) > 1) {
    $command = 'tail -n ' . $num_rows . ' ' . $csv_path;
  }
  else {
    $command = 'tac ' . $csv_path . ' | grep -m ' . $num_rows . ' ' . $directions[0];
  }
  $out = `$command`;
  $lines = explode("\n", trim($out));

  foreach ($lines as $line) {

    $line = str_getcsv(trim($line));
    $point = [
      'date' => $line[0] ?? NULL,
      'direction' => $line[1] ?? NULL,
      'speed' => $line[2] ?? NULL,
      'size' => $line[3] ?? NULL,
      'ping' => $line[4] ?? NULL,
      'day' => NULL,
      'time_period' => NULL,
      'above_max' => FALSE,
    ];
    if (empty($graph_max_value[$point['direction']])) {
      continue;
    }
    if ($point['speed'] > $graph_max_value[$point['direction']]) {
      $point['graph_speed'] = $graph_max_value[$point['direction']];
      $point['above_max'] = TRUE;
    }
    else {
      $point['graph_speed'] = $point['speed'];
    }
    $point['day'] = explode(' ', $point['date'])[0];
    $point['time_period'] = get_time_period($point['date']);
    $point['ping'] = ($point['ping']) ?: UNKNOWN_VALUE;
    $point['graph'] = round(($point['graph_speed'] / $graph_max_value[$point['direction']]) * $graph_width);
    $key = $point['date'] . '|' . $point['direction'];

    if ($time_period && $time_period != $point['time_period']) {
      continue;
    }
    if ($start_date && $point['day'] < $start_date) {
      continue;
    }
    if ($end_date && $point['day'] > $end_date) {
      continue;
    }

    $data[$key] = $point;

  } // Loop thru lines.

  if (!$data) {
    die("No data found.\n");
  }

  ksort($data);

  $row = 0;
  $num_rows = count($data);
  $first = array_values($data)[0]['date'];
  $last = array_values($data)[($num_rows - 1)]['date'];

  $stats = [];
  foreach (array_merge($directions, ['ping']) as $key) {
    $stats[$key] = get_stats($data, $key, $time_period);
  }

  print "+---------------------+-----------------------------------------------------+------------+--------+\n";
  print "|                     |           1         2         3         4         5 |   Speed    | Ping   |\n";
  print "| Time                | 0         0         0         0         0         0 |  (mbps)    | (ms)   |\n";
  print "+---------------------+-----------------------------------------------------+------------+--------+\n";
  foreach ($data as $point) {
    $row++;
    $marker = ($point['direction'] == 'up') ? POINT_MARKER_UP : POINT_MARKER_DOWN;
    $max_indicator = ($point['speed'] == $stats[$point['direction']]['max']) ? INDICATOR_MAX : '';
    $min_indicator = (!$max_indicator && $point['speed'] == $stats[$point['direction']]['min']) ? INDICATOR_MIN : '';
    $maxmin_indicator = str_pad($min_indicator . $max_indicator, 1, ' ');
    print '| ' . $point['date'] . ' | ';
    print str_repeat(' ', $point['graph']) . $marker . str_repeat(' ', $graph_width - $point['graph']) . ' |';
    print str_pad($point['speed'], 8, ' ', STR_PAD_LEFT) . (($point['direction'] == 'up') ? DIRECTION_MARKER_UP : DIRECTION_MARKER_DOWN) . ' ' . $maxmin_indicator . ' | ';
    $max_indicator = ($point['ping'] == $stats['ping']['max']) ? INDICATOR_MAX : '';
    $min_indicator = (!$max_indicator && $point['ping'] == $stats['ping']['min']) ? INDICATOR_MIN : '';
    $maxmin_indicator = str_pad($min_indicator . $max_indicator, 1, ' ');
    print str_pad($point['ping'], 4, ' ', STR_PAD_LEFT) . ' ' . $maxmin_indicator . ' |';
    print "\n";
    if (!($row % 10) && $row < $num_rows) {
      print "+---------------------+ 0 ------- 1 ------- 2 ------- 3 ------- 4 ------- 5 +------------+--------+\n";
    }
  }
  print "+---------------------+-----------------------------------------------------+------------+--------+\n";

  print "\n";
  print "== Summary ==\n";
  print $first . ' - ' . $last;
  if ($time_period) {
    print " ({$time_period})";
  }
  print "\n";
  print "+-----------------+---------+---------+---------+---------+---------+-------+\n";
  print "| Action          |    Mean |  Median | Std Dev |     Max |     Min | Count |\n";
  print "+-----------------+---------+---------+---------+---------+---------+-------+\n";
  foreach ($directions as $key) {
    if ($stats[$key]['count'] > 0) {
      print '| ' . str_pad(ucfirst($key . 'load (mbps)'), 15) . ' | ';
      print str_pad(number_format($stats[$key]['mean'], 3), 7, ' ', STR_PAD_LEFT) . ' | ';
      print str_pad(number_format($stats[$key]['median'], 3), 7, ' ', STR_PAD_LEFT) . ' | ';
      print str_pad(number_format($stats[$key]['std_dev'], 3), 7, ' ', STR_PAD_LEFT) . ' | ';
      print str_pad(number_format($stats[$key]['max'], 3), 7, ' ', STR_PAD_LEFT) . ' | ';
      print str_pad(number_format($stats[$key]['min'], 3), 7, ' ', STR_PAD_LEFT) . ' | ';
      print str_pad($stats[$key]['count'], 5, ' ', STR_PAD_LEFT) . ' | ';
      print "\n";
    }
  }
  $key = 'ping';
  if ($stats[$key]['count'] > 0) {
    print '| Ping (ms)       | ';
    print str_pad(number_format($stats[$key]['mean']), 7, ' ', STR_PAD_LEFT) . ' | ';
    print str_pad(number_format($stats[$key]['median']), 7, ' ', STR_PAD_LEFT) . ' | ';
    print str_pad(number_format($stats[$key]['std_dev']), 7, ' ', STR_PAD_LEFT) . ' | ';
    print str_pad(number_format($stats[$key]['max']), 7, ' ', STR_PAD_LEFT) . ' | ';
    print str_pad(number_format($stats[$key]['min']), 7, ' ', STR_PAD_LEFT) . ' | ';
    print str_pad($stats[$key]['count'], 5, ' ', STR_PAD_LEFT) . ' | ';
    print "\n";
  }
  print "+-----------------+---------+---------+---------+---------+---------+-------+\n";

}

function get_stats($data, $key, $time_period = NULL) {

  if ($key == 'up' || $key == 'down') {
    $index = 'speed';
  }
  else {
    $index = $key;
  }

  $values = [];
  $max = -1;
  $min = 999999999;
  $count = 0;
  $total = 0;

  foreach ($data as $point) {
    if (is_null($point[$index])
      || $point[$index] == UNKNOWN_VALUE
      || ($index == 'speed' && $point['direction'] != $key)) {
      continue;
    }
    if ($time_period && $time_period != $point['time_period']) {
      continue;
    }
    $count++;
    $total += $point[$index];
    if ($point[$index] > $max) {
      $max = $point[$index];
    }
    if ($point[$index] < $min) {
      $min = $point[$index];
    }
    $values[] = $point[$index];
  } // Loop thru data rows.

  sort($values);
  $mean = 0;
  $median = 0;
  $std_dev = 0;

  if ($count) {
    $mean = $total / $count;
    $middle = floor($count/2);
    if ($count % 2) {
      $median = $values[$middle];
    }
    else {
      $median = ($values[$middle - 1] + $values[$middle]) / 2;
    }
    $total = 0;
    foreach ($values as $value) {
      $total += pow(($value - $mean), 2);
    }
    $std_dev = sqrt($total / $count);
  }

  return [
    'count' => $count,
    'mean' => $mean,
    'median' => $median,
    'std_dev' => $std_dev,
    'max' => $max,
    'min' => $min,
  ];

}

/**
 * 1 am - 9am - Early
 * 9 am - 5pm - Day
 * 5 pm - 1am - Late
 */
function get_time_period($date) {
   if (!preg_match('/ (\d{2}):/', $date, $matches)) {
     return '';
   }
   $hour = intval($matches[1]);
   if ($hour < 1 || $hour > 16) {
     $period = 'late';
   }
   elseif ($hour > 8) {
     $period = 'day';
   }
   else {
     $period = 'early';
   }
   return $period;
}
